#BlueJ class context
comment0.target=ProjectLinkedList
comment0.text=\n\ This\ is\ a\ doubly\ linked,\ circular\ list\ which\ can\ hold\ any\ type\ of\ element.\ \ \n\n\ @author\ (your\ name)\n\ @version\ (a\ version\ number\ or\ a\ date)\n
comment1.params=
comment1.target=ProjectLinkedList()
comment10.params=
comment10.target=void\ reset()
comment11.params=target
comment11.target=int\ indexOf(java.lang.Object)
comment11.text=\n\ Simple\ iteration\ through\ the\ list\ to\ find\ the\ index\ of\ a\ given\ element.\n\ if\ the\ target\ is\ not\ found\ in\ the\ list,\ returns\ -1.\n
comment12.params=index
comment12.target=ProjectLinkedList.LinkedListNode\ nodeAt(int)
comment12.text=\n\ This\ is\ a\ helper\ method\ for\ us\ to\ find\ the\ node\ at\ a\ certain\ index\ -\ I've\ made\n\ some\ changes\ to\ the\ algorithm\ in\ the\ textbook\ to\ demonstrate\ a\ different\ approach.\ This\ method\ is\ dynamic\n\ in\ that\ it\ it\ searches\ from\ wither\ the\ beginning\ or\ end\ of\ the\ list\ depending\ on\ if\n\ the\ index\ value\ is\ greater\ or\ lesser\ than\ size/2.\n
comment13.params=idx
comment13.target=boolean\ checkIndex(int)
comment13.text=\n\ Helper\ method\ to\ assure\ index\ won't\ cause\ any\ problems.\n
comment14.params=
comment14.target=java.lang.Object\ getLastElement()
comment15.params=
comment15.target=java.util.Iterator\ iterator()
comment15.text=\n\ This\ is\ straight\ form\ the\ textbook\ -\ returns\ an\ iterator\ for\ the\ Linked\ list;\n
comment16.params=
comment16.target=java.lang.String\ toString()
comment17.params=
comment17.target=void\ removeDuplicates()
comment17.text=\ \n\ ensures\ that\ there\ are\ no\ duplicate\ objects\ in\ the\ list.\ This\ is\ useful\ for\ making\ a\ \n\ linked\ set,\ without\ having\ to\ change\ data\ types.\n
comment18.params=
comment18.target=Room[]\ toArray()
comment19.params=arr
comment19.target=Room[]\ mergeSort(Room[])
comment2.params=value
comment2.target=void\ add(java.lang.Object)
comment2.text=\n\ \ Adds\ value\ to\ the\ end\ of\ the\ list.\n
comment20.params=result\ left\ right
comment20.target=void\ merge(Room[],\ Room[],\ Room[])
comment3.params=index\ data
comment3.target=void\ add(int,\ java.lang.Object)
comment3.text=\n\ Adds\ value\ at\ specific\ index\n
comment4.params=value
comment4.target=boolean\ contains(java.lang.Object)
comment5.params=idx
comment5.target=java.lang.Object\ get(int)
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\ \n\ Returns\ whether\ or\ not\ the\ list\ is\ empty\n
comment7.params=idx\ newVal
comment7.target=void\ set(int,\ java.lang.Object)
comment7.text=\n\ Sets\ a\ value\ at\ a\ given\ index\n
comment8.params=
comment8.target=int\ size()
comment8.text=\ \n\ returns\ the\ size\ of\ the\ list\n
comment9.params=idx
comment9.target=void\ remove(int)
numComments=21
