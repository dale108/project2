#BlueJ class context
comment0.target=ProjectBST
comment0.text=\n\ ProjectBST\ is\ a\ custom\ implementation\ of\ a\ binary\ search\ tree\ for\ Project\ 2.\ It\ contains\n\ standard\ methods\ such\ as\ add,\ remove\ and\ contains\ as\ well\ as\ custom\ methods\ for\ use\ in\ the\n\ program,\ such\ as\ find\ guest.\n\n\ @author\ Dale\ Berg\n
comment1.params=
comment1.target=ProjectBST()
comment1.text=\n\ Constructor\ 1\n
comment10.params=target
comment10.target=boolean\ contains(java.lang.Comparable)
comment10.text=\n\ if\ the\ tree\ contains\ a\ value,\ will\ return\ true,\ otherwise\ false.\n
comment11.params=n\ target
comment11.target=boolean\ contains(ProjectBST.BSTNode,\ java.lang.Comparable)
comment12.params=
comment12.target=void\ print()
comment12.text=\n\ Prints\ values\ in\ order\n
comment13.params=root
comment13.target=void\ printInorder(ProjectBST.BSTNode)
comment14.params=
comment14.target=void\ printPreorder()
comment15.params=root
comment15.target=void\ printPreorder(ProjectBST.BSTNode)
comment16.params=
comment16.target=void\ printPostorder()
comment17.params=root
comment17.target=void\ printPostorder(ProjectBST.BSTNode)
comment18.params=
comment18.target=void\ printGuestSideways()
comment18.text=\n\ This\ is\ a\ custom\ implementation\ of\ the\ print\ sideways\ method\ we\ were\ introduced\ to\ in\n\ the\ text.\ The\ values\ in\ the\ search\ tree\ are\ ordered\ based\ on\ phoneNumber,\ so\ it\ will\n\ print\ a\ list\ ordered\ by\ phoen\ number.\ \n
comment19.params=root\ level
comment19.target=void\ printGuestSideways(ProjectBST.BSTNode,\ int)
comment19.text=\n\ Creates\ a\ sideways\ structural\ view\ of\ the\ data\ structure,\ helpful\ for\ testing.\n
comment2.params=root
comment2.target=ProjectBST(ProjectBST.BSTNode)
comment2.text=\n\ Constructor\ 2\n
comment3.params=value
comment3.target=void\ add(java.lang.Comparable)
comment3.text=\n\ This\ is\ the\ method\ used\ for\ adding\ all\ elements\ to\ the\ array\ -\ without\ this,\ nothing\ may\n\ be\ added.\n
comment4.params=root\ value
comment4.target=ProjectBST.BSTNode\ add(ProjectBST.BSTNode,\ java.lang.Comparable)
comment5.params=phone
comment5.target=Guest\ findGuest(java.lang.String)
comment6.params=root\ phone
comment6.target=Guest\ findGuest(ProjectBST.BSTNode,\ java.lang.String)
comment7.params=value
comment7.target=void\ remove(java.lang.Comparable)
comment7.text=\n\ Remove\ was\ the\ most\ challenging\ method\ to\ write\ in\ the\ entire\ program.\ Essentially,\n\ we\ traverse\ the\ tree\ looking\ for\ the\ value\ passed\ as\ an\ argument\ and\ once\ we've\ found\ it,\n\ we\ traverse\ the\ right\ subtree\ from\ the\ value\ to\ be\ removed\ until\ we\ find\ the\ largest\n\ value\ in\ that\ subtree\ (the\ leftmost\ leaf).\ Then\ we\ set\ the\ data\ field\ of\ the\ branch\ we\n\ are\ attempting\ to\ remove\ to\ the\ data\ value\ of\ the\ leaf.\ If\ the\ value\ to\ be\ removed\n\ is\ a\ leaf,\ then\ we\ can\ simply\ set\ the\ connection\ to\ it\ to\ null.\ I\ 've\ written\ detailed\n\ algorithm\ notes\ below.\ \n
comment8.params=root\ value
comment8.target=ProjectBST.BSTNode\ remove(ProjectBST.BSTNode,\ java.lang.Comparable)
comment9.params=root
comment9.target=ProjectBST.BSTNode\ findMinFromRight(ProjectBST.BSTNode)
comment9.text=\n\ This\ is\ a\ private\ helper\ method\ for\ the\ remove\ process.\ \n
numComments=20
